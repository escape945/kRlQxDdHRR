"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class CoreConfigHandler{generateClientConfig(t){var e={policy:new Object,log:new Object,inbounds:new Object,outbounds:new Object,stats:new Object,api:new Object,routing:new Object};return e.policy={system:{statsOutboundUplink:!0,statsOutboundDownlink:!0}},e.log={access:"",error:"",loglevel:"warning"},e.api={tag:"api",services:["StatsService"]},e.inbounds=[{tag:"socks",port:t.InboundSocksPort,listen:"127.0.0.1",protocol:"socks",sniffing:{enabled:t.sniffingEnabled,destOverride:["http","tls"]},settings:{auth:"noauth",udp:t.udpEnabled,allowTransparent:!1}},{tag:"http",port:t.InboundHttpPort,listen:"127.0.0.1",protocol:"http",sniffing:{enabled:t.sniffingEnabled,destOverride:["http","tls"]},settings:{auth:"noauth",udp:t.udpEnabled,allowTransparent:!1}},{tag:"api",port:t.InboundApiPort,listen:"127.0.0.1",protocol:"dokodemo-door",settings:{udp:!1,address:"127.0.0.1",allowTransparent:!1}}],e.outbounds=[{tag:"proxy",protocol:t.OutboundProtocol,settings:{vnext:[{address:t.OutboundRemoteHost,port:t.OutboundRemotePort,users:[{id:t.OutboundUUID,alterId:t.OutboundAlterId,email:"t@t.tt",security:t.OutboundEncryption,encryption:"none"}]}]},streamSettings:{network:t.OutboundStreamType,security:t.OutboundStreamSecurity,tlsSettings:{allowInsecure:!1,serverName:t.OutboundHost},[t.OutboundStreamType+"Settings"]:{path:t.OutboundPath,headers:{Host:t.OutboundHost}}},mux:{enabled:t.muxEnabled,concurrency:-1}},{tag:"direct",protocol:"freedom",settings:{}},{tag:"block",protocol:"blackhole",settings:{response:{type:"http"}}}],e.routing={domainStrategy:"AsIs",domainMatcher:"mph",rules:[{type:"field",inboundTag:["api"],outboundTag:"api",enabled:!0},{type:"field",outboundTag:"direct",domain:["geosite:cn"],enabled:!0},{type:"field",inboundTag:[],outboundTag:"direct",ip:["geoip:private","geoip:cn"],enabled:!0},{type:"field",port:"0-65535",outboundTag:"proxy",enabled:!0}]},e}generateServerConfig(t){var e={policy:new Object,log:new Object,inbounds:new Object,outbounds:new Object,stats:new Object,api:new Object,routing:new Object,dns:new Object};return e.log={access:"",error:"",loglevel:"warning"},e.api={tag:"api",services:[]},t.InboundCustom?e.outbounds=t.InboundCustom:e.inbounds=[{port:t.InboundPort,listen:t.InboundAddress,protocol:t.InboundProtocol,settings:{clients:[{id:t.InboundUUID,level:0,email:"t@t.tt"}],decryption:"none"},streamSettings:{network:t.InboundStreamType,security:t.InboundStreamSecurity,[t.InboundStreamType+"Settings"]:{path:t.InboundPath}},sniffing:{enabled:t.sniffingEnabled,destOverride:["http","tls","quic"],metadataOnly:!1},tag:"main"}],e.dns={servers:["https+local://1.1.1.1/dns-query"]},t.OutboundCustom?e.outbounds=t.OutboundCustom:e.outbounds=[{protocol:"freedom",settings:{}},{protocol:"blackhole",settings:{},tag:"blocked"}],t.RoutingCustom?e.routing=t.RoutingCustom:e.routing={rules:[{inboundTag:["api"],outboundTag:"api",type:"field"},{outboundTag:"blocked",protocol:["bittorrent"],type:"field"}]},e}}exports.default=CoreConfigHandler;
